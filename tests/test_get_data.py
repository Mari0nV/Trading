import json
import pytest
import pandas as pd
import numpy as np
from datetime import datetime
import math

from trading.get_data import get_candle_data
import trading.config as cfg
from trading.utils import date_to_milliseconds


raw_data = {
    "ETHUSDT": {
        "1d": [  # 01/05/21 midnight - 04/05/21 23h59
            [1619827200000, '2772.42000000', '2954.28000000', '2743.41000000', '2944.77000000', '690260.07741000'],
            [1619913600000, '2944.83000000', '2985.00000000', '2852.26000000', '2949.56000000', '571982.54450000'],
            [1620000000000, '2949.33000000', '3454.00000000', '2949.32000000', '3431.04000000', '1329088.06280000'],
            [1620086400000, '3431.04000000', '3527.00000000', '3160.00000000', '3239.01000000', '1826039.38558000'],
        ],
        "4h": [  # 04/05/21 midnight - 04/05/21 23h59
            [1620086400000, '3431.04000000', '3450.00000000', '3180.61000000', '3232.25000000', '369216.38049000'],
            [1620100800000, '3232.40000000', '3403.99000000', '3219.10000000', '3313.63000000', '182970.94680000'],
            [1620115200000, '3314.00000000', '3487.00000000', '3276.70000000', '3480.01000000', '247097.93596000'],
            [1620129600000, '3480.01000000', '3527.00000000', '3213.35000000', '3228.49000000', '503040.13484000'],
            [1620144000000, '3228.36000000', '3412.91000000', '3160.00000000', '3412.90000000', '341088.09144000'],
            [1620158400000, '3412.91000000', '3429.31000000', '3216.47000000', '3239.01000000', '182625.89605000'],
        ],
        "15m": [  # 05/05/21 00h - 05/05/21 01h59
            [1620165600000, '3332.80000000', '3350.00000000', '3275.71000000', '3294.98000000', '16763.83148000'],
            [1620166500000, '3294.98000000', '3305.00000000', '3263.52000000', '3264.99000000', '10622.48898000'],
            [1620167400000, '3265.00000000', '3280.07000000', '3250.28000000', '3259.44000000', '12238.64522000'],
            [1620168300000, '3258.84000000', '3314.97000000', '3255.81000000', '3311.84000000', '10051.31638000'],
            [1620169200000, '3311.82000000', '3318.88000000', '3288.82000000', '3316.59000000', '6625.24414000'],
            [1620170100000, '3316.60000000', '3318.10000000', '3275.32000000', '3300.00000000', '7017.40156000'],
            [1620171000000, '3299.55000000', '3323.35000000', '3267.77000000', '3270.68000000', '7569.62310000'],
            [1620171900000, '3270.55000000', '3274.87000000', '3216.47000000', '3239.01000000', '17264.21011000']
        ]
    }
}

def mock_get_data_from_api(currency, gran, start_date, end_date):
    start_ms = date_to_milliseconds(start_date)
    end_ms = date_to_milliseconds(end_date)

    results = []
    for kline in raw_data["ETHUSDT"][gran]:
        if kline[0] >= start_ms and kline[0] <= end_ms:
            results.append(kline)

    return results

@pytest.mark.parametrize("start, end, gran, content", [
    ("2021-05-02 00:00:00", "2021-05-03 23:59:00", "1d", {  # 1d
        "klines": [
            [1619913600000, '2944.83000000', '2985.00000000', '2852.26000000', '2949.56000000', '571982.54450000'],
            [1620000000000, '2949.33000000', '3454.00000000', '2949.32000000', '3431.04000000', '1329088.06280000'],
        ],
        "begin": 1619906400000.0,
        "end": 1620079140000.0
    }),
    ("2021-05-01 00:00:00", "2021-05-04 23:59:00", "1d", {
        "klines": [
            [1619827200000, '2772.42000000', '2954.28000000', '2743.41000000', '2944.77000000', '690260.07741000'],
            [1619913600000, '2944.83000000', '2985.00000000', '2852.26000000', '2949.56000000', '571982.54450000'],
            [1620000000000, '2949.33000000', '3454.00000000', '2949.32000000', '3431.04000000', '1329088.06280000'],
            [1620086400000, '3431.04000000', '3527.00000000', '3160.00000000', '3239.01000000', '1826039.38558000'],
        ],
        "begin": 1619820000000.0,
        "end": 1620165540000.0
    }),
    ("2021-05-02 00:00:00", "2021-05-03 23:59:00", "1d", {  # same as test one but this time the file exists and contains data
        "klines": [
            [1619913600000, '2944.83000000', '2985.00000000', '2852.26000000', '2949.56000000', '571982.54450000'],
            [1620000000000, '2949.33000000', '3454.00000000', '2949.32000000', '3431.04000000', '1329088.06280000'],
        ]
    }),
    ("2021-05-04 04:00:00", "2021-05-04 11:00:00", "4h", {  # 4h
        "klines": [
            [1620100800000, '3232.40000000', '3403.99000000', '3219.10000000', '3313.63000000', '182970.94680000'],
            [1620115200000, '3314.00000000', '3487.00000000', '3276.70000000', '3480.01000000', '247097.93596000'],
        ],
        "begin": 1620093600000.0,
        "end": 1620118800000.0
    }),
    ("2021-05-04 00:00:00", "2021-05-04 15:00:00", "4h", {
        "klines": [
            [1620086400000, '3431.04000000', '3450.00000000', '3180.61000000', '3232.25000000', '369216.38049000'],
            [1620100800000, '3232.40000000', '3403.99000000', '3219.10000000', '3313.63000000', '182970.94680000'],
            [1620115200000, '3314.00000000', '3487.00000000', '3276.70000000', '3480.01000000', '247097.93596000'],
            [1620129600000, '3480.01000000', '3527.00000000', '3213.35000000', '3228.49000000', '503040.13484000'],
        ],
        "begin": 1620079200000.0,
        "end": 1620133200000.0
    }),
    ("2021-05-04 04:00:00", "2021-05-04 11:00:00", "4h", {
        "klines": [
            [1620100800000, '3232.40000000', '3403.99000000', '3219.10000000', '3313.63000000', '182970.94680000'],
            [1620115200000, '3314.00000000', '3487.00000000', '3276.70000000', '3480.01000000', '247097.93596000'],
        ]
    }),
    ("2021-05-05 00:20:00", "2021-05-05 01:05:00", "15m", {  # 15m
        "klines": [
            [1620167400000, '3265.00000000', '3280.07000000', '3250.28000000', '3259.44000000', '12238.64522000'],
            [1620168300000, '3258.84000000', '3314.97000000', '3255.81000000', '3311.84000000', '10051.31638000'],
            [1620169200000, '3311.82000000', '3318.88000000', '3288.82000000', '3316.59000000', '6625.24414000'],
        ],
        "begin": 1620166800000.0,
        "end": 1620169500000.0
    }),
    ("2021-05-05 00:00:00", "2021-05-05 01:35:00", "15m", {
        "klines": [
            [1620165600000, '3332.80000000', '3350.00000000', '3275.71000000', '3294.98000000', '16763.83148000'],
            [1620166500000, '3294.98000000', '3305.00000000', '3263.52000000', '3264.99000000', '10622.48898000'],
            [1620167400000, '3265.00000000', '3280.07000000', '3250.28000000', '3259.44000000', '12238.64522000'],
            [1620168300000, '3258.84000000', '3314.97000000', '3255.81000000', '3311.84000000', '10051.31638000'],
            [1620169200000, '3311.82000000', '3318.88000000', '3288.82000000', '3316.59000000', '6625.24414000'],
            [1620170100000, '3316.60000000', '3318.10000000', '3275.32000000', '3300.00000000', '7017.40156000'],
            [1620171000000, '3299.55000000', '3323.35000000', '3267.77000000', '3270.68000000', '7569.62310000'],
        ],
        "begin": 1620165600000.0,
        "end": 1620171300000.0
    }),
    ("2021-05-05 00:20:00", "2021-05-05 01:05:00", "15m", {
        "klines": [
            [1620167400000, '3265.00000000', '3280.07000000', '3250.28000000', '3259.44000000', '12238.64522000'],
            [1620168300000, '3258.84000000', '3314.97000000', '3255.81000000', '3311.84000000', '10051.31638000'],
            [1620169200000, '3311.82000000', '3318.88000000', '3288.82000000', '3316.59000000', '6625.24414000'],
        ],
    }),
])
def test_get_data(start, end, gran, content, mocker):
    mocker.patch("trading.get_data.get_data_from_binance", mock_get_data_from_api)
    df = get_candle_data("ETHUSDT", start, end, gran, folder="tests/coins_data")

    assert len(df) == len(content["klines"])
    for i, line in enumerate(df.values):
        for j, elt in enumerate(line):
            assert math.isclose(float(elt), float(content["klines"][i][j]))
    if "begin" in content:
        with open(f"tests/coins_data/ETHUSDT_{gran}_data.json", "r") as fp:
            data = json.load(fp)["data"]
        assert data == content
